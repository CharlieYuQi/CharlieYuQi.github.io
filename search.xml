<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HibernateException  Found shared references to a collection</title>
    <url>/2017/09/18/2017-09-18-HibernateException-shared-references-to-a-collection/</url>
    <content><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>项目采用SpringBoot框架，数据库访问采用JPA。新增功能时出现<code>HibernateException: Found shared references to a collection</code><br>具体情况是权限管理模型基于RBAC，有User，Role，Authority 三个实体以及上述三者的两两关联表，共计六张表。<br>当创建一个用户时，首先通过 Role 获取 Authority List，再赋值给 User的 Authority List，最后将用户写入数据库时抛出以上异常。<br>数据模型如下，省略部分字段。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(name = &quot;UserAuthority&quot;, joinColumns = &#123; @JoinColumn(name = &quot;userId&quot;) &#125;, inverseJoinColumns = &#123; @JoinColumn(name = &quot;authorityId&quot;) &#125;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(name = &quot;RoleAuthority&quot;, joinColumns = &#123; @JoinColumn(name = &quot;roleId&quot;) &#125;, inverseJoinColumns = &#123; @JoinColumn(name = &quot;authorityId&quot;) &#125;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Authority</span> &#123;</span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;authorities&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;authorities&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> User <span class="title function_">createUser</span><span class="params">(String name, String role)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(name);</span><br><span class="line">    user.setRole(roleService.findByRole(role));</span><br><span class="line">    List&lt;Authority&gt; authorities = roleService.getAuthoritiesByRole(role);</span><br><span class="line">    user.setAuthorities(authorities);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>参见<br><a href="http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html">Hibernate UserGuide 2.8.1. Collections as a value type</a> 两个实体不可以共享同一个集合，上例中 Role 和 User 共用了同一个  Authority List，最终导致以上问题。</p>
<blockquote>
<p>Two entities cannot share a reference to the same collection instance. Collection-valued properties do not support null value semantics because Hibernate does not distinguish between a null collection reference and an empty collection.</p>
</blockquote>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>新建一个集合，将原来的集合元素添加进去，并赋值给另一个实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> User <span class="title function_">createUser</span><span class="params">(String name, String role)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(name);</span><br><span class="line">    user.setRole(roleService.findByRole(role));</span><br><span class="line">    List&lt;Authority&gt; authorities = roleService.getAuthoritiesByRole(role);</span><br><span class="line"></span><br><span class="line">    List&lt;Authority&gt; clonedAuthorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(authorities.size());</span><br><span class="line">    authorities.forEach(authority -&gt; clonedAuthorities.add(authority));</span><br><span class="line"></span><br><span class="line">    user.setAuthorities(clonedAuthorities);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty连接池ChannelPool,FixedChannelPool应用</title>
    <url>/2017/09/18/2017-09-18-Netty_channelpool/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>Netty is an asynchronous event-driven network application framework<br>for rapid development of maintainable high performance protocol servers &amp; clients.</p>
</blockquote>
<p>如今越来越多的应用采用Netty作为服务端高性能异步通讯框架，对于客户端而言，大部分需求只需和服务端建立一条链接收发消息。但如果客户端需要和服务端建立多条链接的例子就比较少了。<br>最简单的实现就是一个for循环，建立多个NioEventLoopGroup与服务端交互。另外还有如果要和多个服务端进行交互又该如何解决。</p>
<p>其实Netty从4.0版本就提供了连接池ChannelPool，可以解决与多个服务端交互以及与单个服务端建立连接池的问题。</p>
<p><img src="http://ww1.sinaimg.cn/large/e5aac86bgy1fi3zjslhvaj20d30210sm.jpg"></p>
<span id="more"></span>

<h1 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a>服务端程序</h1><p>首先我们完成服务端的代码，用户测试客户端的连接池。服务端不需要做任何特殊处理，代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.yuqibit.nio.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YuQi on 2017/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> port)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">delimiter</span> <span class="operator">=</span> Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">DelimiterBasedFrameDecoder</span>(<span class="number">1024</span>, delimiter))</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>()).addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>())</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> <span class="title class_">DefaultEventExecutorGroup</span>(<span class="number">8</span>),</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">NettyServerHandler</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> b.bind(port).sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NettyServer</span>().run(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务端Handler，打印客户端发送的字符串，并回复另一个字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.yuqibit.nio.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YuQi on 2017/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelActived&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> (String) msg;</span><br><span class="line">        System.out.println(count.getAndIncrement() + <span class="string">&quot;:&quot;</span> + body);</span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;Welcome to Netty.$_&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h1><p>重点是以下客户端代码，首先要实现自己的<code>ChannelPoolHandler</code>,主要是<code>channelCreated</code>,当链接创建的时候添加channelhandler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.yuqibit.nio.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.pool.ChannelPoolHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YuQi on 2017/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyChannelPoolHandler</span> <span class="keyword">implements</span> <span class="title class_">ChannelPoolHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReleased</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelReleased. Channel ID: &quot;</span> + ch.id());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelAcquired</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelAcquired. Channel ID: &quot;</span> + ch.id());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelCreated</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">delimiter</span> <span class="operator">=</span> Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;channelCreated. Channel ID: &quot;</span> + ch.id());</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) ch;</span><br><span class="line">        channel.config().setKeepAlive(<span class="literal">true</span>);</span><br><span class="line">        channel.config().setTcpNoDelay(<span class="literal">true</span>);</span><br><span class="line">        channel.pipeline()</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">DelimiterBasedFrameDecoder</span>(<span class="number">1024</span>, delimiter))</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>()).addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>()).addLast(<span class="keyword">new</span> <span class="title class_">NettyClientHander</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端Handler,打印服务端的response。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.yuqibit.nio.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YuQi on 2017/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClientHander</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(count.getAndIncrement() + <span class="string">&quot;:&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端实现连接池，其中ChannelPoolMap可用于与多个服务端建立链接，本例中采用FixedChannelPool建立与单个服务端最大连接数为2的连接池。在main函数里通过向连接池获取channel发送了十条消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.yuqibit.nio.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.pool.AbstractChannelPoolMap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.pool.ChannelPoolMap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.pool.FixedChannelPool;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.pool.SimpleChannelPool;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.FutureListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YuQi on 2017/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyPoolClient</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Bootstrap</span> <span class="variable">strap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">    <span class="type">InetSocketAddress</span> <span class="variable">addr1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">    <span class="type">InetSocketAddress</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;10.0.0.11&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">    ChannelPoolMap&lt;InetSocketAddress, SimpleChannelPool&gt; poolMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        strap.group(group).channel(NioSocketChannel.class).option(ChannelOption.TCP_NODELAY, <span class="literal">true</span>)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        poolMap = <span class="keyword">new</span> <span class="title class_">AbstractChannelPoolMap</span>&lt;InetSocketAddress, SimpleChannelPool&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> SimpleChannelPool <span class="title function_">newPool</span><span class="params">(InetSocketAddress key)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FixedChannelPool</span>(strap.remoteAddress(key), <span class="keyword">new</span> <span class="title class_">NettyChannelPoolHandler</span>(), <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">NettyPoolClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyPoolClient</span>();</span><br><span class="line">        client.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ECHO_REQ</span> <span class="operator">=</span> <span class="string">&quot;Hello Netty.$_&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// depending on when you use addr1 or addr2 you will get different pools.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">SimpleChannelPool</span> <span class="variable">pool</span> <span class="operator">=</span> client.poolMap.get(client.addr1);</span><br><span class="line">            Future&lt;Channel&gt; f = pool.acquire();</span><br><span class="line">            f.addListener((FutureListener&lt;Channel&gt;) f1 -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (f1.isSuccess()) &#123;</span><br><span class="line">                    <span class="type">Channel</span> <span class="variable">ch</span> <span class="operator">=</span> f1.getNow();</span><br><span class="line">                    ch.writeAndFlush(ECHO_REQ);</span><br><span class="line">                    <span class="comment">// Release back to pool</span></span><br><span class="line">                    pool.release(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><p>首先启动服务端，然后启动客户端，for循环里向服务端发送了10条消息。<br>服务端的输出如下，可以看到总共与服务端建立了两个channel，收到10条消息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channelActived</span><br><span class="line">channelActived</span><br><span class="line">1:Hello Netty.</span><br><span class="line">2:Hello Netty.</span><br><span class="line">3:Hello Netty.</span><br><span class="line">4:Hello Netty.</span><br><span class="line">5:Hello Netty.</span><br><span class="line">6:Hello Netty.</span><br><span class="line">7:Hello Netty.</span><br><span class="line">8:Hello Netty.</span><br><span class="line">9:Hello Netty.</span><br><span class="line">10:Hello Netty.</span><br></pre></td></tr></table></figure>
<p>客户端输入如下，可以看到channelCreated了两次，剩下都是从连接池里请求连接和释放连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channelCreated. Channel ID: ea8504a8</span><br><span class="line">channelCreated. Channel ID: 77c8857b</span><br><span class="line">channelReleased. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: 77c8857b</span><br><span class="line">channelAcquired. Channel ID: ea8504a8</span><br><span class="line">channelAcquired. Channel ID: 77c8857b</span><br><span class="line">channelReleased. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: 77c8857b</span><br><span class="line">channelAcquired. Channel ID: 77c8857b</span><br><span class="line">channelAcquired. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: ea8504a8</span><br><span class="line">channelAcquired. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: 77c8857b</span><br><span class="line">channelReleased. Channel ID: ea8504a8</span><br><span class="line">channelAcquired. Channel ID: 77c8857b</span><br><span class="line">channelAcquired. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: 77c8857b</span><br><span class="line">channelAcquired. Channel ID: 77c8857b</span><br><span class="line">channelReleased. Channel ID: ea8504a8</span><br><span class="line">channelReleased. Channel ID: 77c8857b</span><br><span class="line"><span class="number">1</span>:Welcome to Netty.</span><br><span class="line"><span class="number">2</span>:Welcome to Netty.</span><br><span class="line"><span class="number">3</span>:Welcome to Netty.</span><br><span class="line"><span class="number">4</span>:Welcome to Netty.</span><br><span class="line"><span class="number">5</span>:Welcome to Netty.</span><br><span class="line"><span class="number">6</span>:Welcome to Netty.</span><br><span class="line"><span class="number">7</span>:Welcome to Netty.</span><br><span class="line"><span class="number">8</span>:Welcome to Netty.</span><br><span class="line"><span class="number">9</span>:Welcome to Netty.</span><br><span class="line"><span class="number">10</span>:Welcome to Netty.</span><br></pre></td></tr></table></figure>
<p>原始代码见<a href="https://github.com/CharlieYuQi/java-learn/tree/master/nio/src/main/java/tk/yuqibit/nio/pool">GitHub</a></p>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Netty</tag>
        <tag>ChannelPool</tag>
      </tags>
  </entry>
  <entry>
    <title>opentsdb特殊字符问题</title>
    <url>/2017/09/18/2017-09-18-opentsdb-special-character/</url>
    <content><![CDATA[<h1 id="Opentsdb对特殊字符规范如下"><a href="#Opentsdb对特殊字符规范如下" class="headerlink" title="Opentsdb对特殊字符规范如下;"></a>Opentsdb对特殊字符规范如下;</h1><blockquote>
<p>The following rules apply to metric and tag values:<br>Strings are case sensitive, i.e. “Sys.Cpu.User” will be stored separately from “sys.cpu.user”<br>Spaces are not allowed<br>Only the following characters are allowed: a to z, A to Z, 0 to 9, -, _, ., &#x2F; or Unicode letters (as per the specification)</p>
</blockquote>
<h1 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">net</span>.opentsdb.core.Tags</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Ensures that a given string is a valid metric name or tag name/value.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> what A human readable description of what&#x27;s being validated.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> s The string to validate.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalArgumentException if the string isn&#x27;t valid.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateString</span><span class="params">(<span class="keyword">final</span> String what, <span class="keyword">final</span> String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid &quot;</span> + what + <span class="string">&quot;: null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid &quot;</span> + what + <span class="string">&quot;: empty string&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (!((<span class="string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) || (<span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">          || (<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;_&#x27;</span> || c == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">          || c == <span class="string">&#x27;/&#x27;</span> || Character.isLetter(c) || isAllowSpecialChars(c))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid &quot;</span> + what</span><br><span class="line">            + <span class="string">&quot; (\&quot;&quot;</span> + s + <span class="string">&quot;\&quot;): illegal character: &quot;</span> + c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol>
<li>从上述代码里可以看到Opentsdb支持自定义允许的特殊字符，<em>isAllowSpecialChars</em>，</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">net</span>.opentsdb.core.TSDB</span><br><span class="line"></span><br><span class="line">    <span class="title function_">if</span> <span class="params">(config.getString(<span class="string">&quot;tsd.core.tag.allow_specialchars&quot;</span>)</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      Tags.setAllowSpecialChars(config.getString(<span class="string">&quot;tsd.core.tag.allow_specialchars&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以只需要在opentsdb的配置文件里加上该属性配置就可以，例如 <em>tsd.core.tag.allow_specialchars &#x3D; :</em> 就将“:”设置为允许的字符了。<br>很奇怪的在于opentsdb的官方文档里没有列出该配置属性 <a href="http://opentsdb.net/docs/build/html/user_guide/configuration.html">OpenTSDB Configuration</a></p>
<p>2、写入opentsdb之前进行数据转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">convert</span><span class="params">(String in)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> in == <span class="literal">null</span> ? <span class="literal">null</span> : in.toLowerCase().replaceAll(<span class="string">&quot;[^-_a-z0-9.\\u4e00-\\u9fa5]&quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>OpenTSDB</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Nginx+Https下redirect问题</title>
    <url>/2017/09/18/2017-09-18-springboot-nginx-redirect-qa/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>项目采用springboot框架，内嵌tomcat容器。前端采用nginx反向代理，当部署了https以后出现的重定向（redirect）的问题。用nginx反向代理tomcat，然后把nginx配置为https访问，并且nginx与tomcat之间配置为普通的http协议，当后台代码定义时redirect，实际是重定向到了http下的地址，导致浏览器上无法访问非https的地址。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>由于对tomcat而言收到的是普通的http请求，因此当tomcat里的应用发生转向请求时将转向为http而非https，为此我们需要告诉tomcat已被https代理，方法是增加X-Forwared-Proto和X-Forwarded-Port两个HTTP头信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    ssl_certificate server.crt;</span><br><span class="line">    ssl_certificate_key server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Port $server_port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p>springboot配置参见<a href="https://docs.spring.io/spring-boot/docs/2.0.0.M3/reference/htmlsingle/#howto-use-tomcat-behind-a-proxy-server">Spring Boot Reference Guide-Use behind a front-end proxy server </a></p>
<p>基于spring-boot开发时只需在application.properties中进行配置。<br>该配置将指示tomcat从HTTP头信息中去获取协议信息（而非从HttpServletRequest中获取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.tomcat.remote_ip_header=x-forwarded-for</span><br><span class="line">server.tomcat.protocol_header=x-forwarded-proto</span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port</span><br><span class="line">server.use-forward-headers=true</span><br></pre></td></tr></table></figure>
<p>以下是经常被漏掉的配置，本人一开始就忘记配置导致不成功。因为我的nginx的机器IP不在默认允许IP列表里</p>
<blockquote>
<p>Tomcat is also configured with a default regular expression that matches internal proxies that are to be trusted. By default, IP addresses in 10&#x2F;8, 192.168&#x2F;16, 169.254&#x2F;16 and 127&#x2F;8 are trusted. You can customize the valve’s configuration by adding an entry to application.properties, e.g.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.tomcat.internal-proxies=192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;</span><br></pre></td></tr></table></figure>
<p>此外，虽然我们的tomcat被nginx反向代理了，但仍可访问到其8080端口。为此可在application.properties中增加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.address=127.0.0.1</span><br></pre></td></tr></table></figure>
<p>这样一来其8080端口就只能被本机访问了，其它机器访问不到。</p>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义log4j2配置文件地址</title>
    <url>/2017/09/18/2017-09-19-log4j2-configuration/</url>
    <content><![CDATA[<p>默认情况下，只要把log4j配置文件放在 CLASSPATH 环境变量所指定的目录， JAVA 启动时会制动加载。实际项目中经常需要把配置文件与打包分离，方便修改，所以需要自定义配置文件加载地址。</p>
<h1 id="SpringMvc"><a href="#SpringMvc" class="headerlink" title="SpringMvc"></a>SpringMvc</h1><p>采用spring mvc框架时需要一般在web.xml里配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;6000&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>采用spring boot轻量级框架后，大部分自定义配置都放在application.properties里了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.config=file:config/log4j2.xm</span><br></pre></td></tr></table></figure>

<h1 id="无框架"><a href="#无框架" class="headerlink" title="无框架"></a>无框架</h1><p>本节为本文重点，发现很多人离了框架就不知道该怎么写代码了。</p>
<span id="more"></span>

<h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>键值对格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PropertyConfigurator.config(filepath) </span><br></pre></td></tr></table></figure>
<p>XML 格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DOMConfigurator.config(filepath) </span><br></pre></td></tr></table></figure>
<h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><p>log4j2里一般不建议使用properties文件，而是使用xml文件。log4j2的版本里自定义配置文件加载地址的接口改为Configurator.initialize了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ConfigurationSource source;</span><br><span class="line">        <span class="type">String</span> <span class="variable">relativePath</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;config&quot;</span> + System.getProperty(<span class="string">&quot;file.separator&quot;</span>) + <span class="string">&quot;log4j2.xml&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">log4jFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(</span><br><span class="line">                System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + System.getProperty(<span class="string">&quot;file.separator&quot;</span>)</span><br><span class="line">                        + relativePath);</span><br><span class="line">        <span class="keyword">if</span> (log4jFile.exists()) &#123;</span><br><span class="line">            source = <span class="keyword">new</span> <span class="title class_">ConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(log4jFile), log4jFile);</span><br><span class="line">            Configurator.initialize(<span class="literal">null</span>, source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC 创建 /home 文件夹</title>
    <url>/2018/03/23/MAC-create-home-md/</url>
    <content><![CDATA[<p>直接操作home 文件夹报错:Operation not supported<br>解决办法：<br>执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/auto_master</span><br></pre></td></tr></table></figure>

<p>注释掉  #&#x2F;home<br>之后执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo automount</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>activate idea.md</title>
    <url>/2018/05/02/activate-idea-md/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.CRC32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">keygen</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">short</span> <span class="title function_">getCRC</span><span class="params">(String s, <span class="type">int</span> i, <span class="type">byte</span> bytes[])</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">CRC32</span> <span class="variable">crc32</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CRC32</span>();</span><br><span class="line">      <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length(); j++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(j);</span><br><span class="line">              crc32.update(c);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      crc32.update(i);</span><br><span class="line">      crc32.update(i &gt;&gt; <span class="number">8</span>);</span><br><span class="line">      crc32.update(i &gt;&gt; <span class="number">16</span>);</span><br><span class="line">      crc32.update(i &gt;&gt; <span class="number">24</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bytes.length - <span class="number">2</span>; k++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">byte</span> <span class="variable">byte0</span> <span class="operator">=</span> bytes[k];</span><br><span class="line">          crc32.update(byte0);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">short</span>) (<span class="type">int</span>) crc32.getValue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> biginteger</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encodeGroups</span><span class="params">(BigInteger biginteger)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">BigInteger</span> <span class="variable">beginner1</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">0x39aa400L</span>);</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; biginteger.compareTo(BigInteger.ZERO) != <span class="number">0</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> biginteger.mod(beginner1).intValue();</span><br><span class="line">          <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encodeGroup(j);</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              sb.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          sb.append(s1);</span><br><span class="line">          biginteger = biginteger.divide(beginner1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encodeGroup</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i % <span class="number">36</span>;</span><br><span class="line">          <span class="type">char</span> c;</span><br><span class="line">          <span class="keyword">if</span> (k &lt; <span class="number">10</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              c = (<span class="type">char</span>) (<span class="number">48</span> + k);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              c = (<span class="type">char</span>) ((<span class="number">65</span> + k) - <span class="number">10</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          sb.append(c);</span><br><span class="line">          i /= <span class="number">36</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> days</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> prtype</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MakeKey</span><span class="params">(String name, <span class="type">int</span> days, <span class="type">int</span> id)</span></span><br><span class="line">  &#123;</span><br><span class="line">      id %= <span class="number">100000</span>;</span><br><span class="line">      <span class="type">byte</span> bkey[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">12</span>];</span><br><span class="line">      bkey[<span class="number">0</span>] = (<span class="type">byte</span>) <span class="number">1</span>; <span class="comment">// Product type: IntelliJ IDEA is 1</span></span><br><span class="line">      bkey[<span class="number">1</span>] = <span class="number">14</span>; <span class="comment">// version</span></span><br><span class="line">      <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      <span class="type">long</span> <span class="variable">ld</span> <span class="operator">=</span> (d.getTime() &gt;&gt; <span class="number">16</span>);</span><br><span class="line">      bkey[<span class="number">2</span>] = (<span class="type">byte</span>) (ld &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">3</span>] = (<span class="type">byte</span>) ((ld &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">4</span>] = (<span class="type">byte</span>) ((ld &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">5</span>] = (<span class="type">byte</span>) ((ld &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>);</span><br><span class="line">      days &amp;= <span class="number">0xffff</span>;</span><br><span class="line">      bkey[<span class="number">6</span>] = (<span class="type">byte</span>) (days &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">7</span>] = (<span class="type">byte</span>) ((days &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">8</span>] = <span class="number">105</span>;</span><br><span class="line">      bkey[<span class="number">9</span>] = -<span class="number">59</span>;</span><br><span class="line">      bkey[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">      bkey[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> getCRC(name, id % <span class="number">100000</span>, bkey);</span><br><span class="line">      bkey[<span class="number">10</span>] = (<span class="type">byte</span>) (w &amp; <span class="number">255</span>);</span><br><span class="line">      bkey[<span class="number">11</span>] = (<span class="type">byte</span>) ((w &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">      <span class="type">BigInteger</span> <span class="variable">pow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;89126272330128007543578052027888001981&quot;</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="type">BigInteger</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;86f71688cdd2612ca117d1f54bdae029&quot;</span>, <span class="number">16</span>);</span><br><span class="line">      <span class="type">BigInteger</span> <span class="variable">k0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(bkey);</span><br><span class="line">      <span class="type">BigInteger</span> <span class="variable">k1</span> <span class="operator">=</span> k0.modPow(pow, mod);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s0</span> <span class="operator">=</span> Integer.toString(id);</span><br><span class="line">      <span class="type">String</span> <span class="variable">sz</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">      <span class="keyword">while</span> (s0.length() != <span class="number">5</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          s0 = sz.concat(s0);</span><br><span class="line">      &#125;</span><br><span class="line">      s0 = s0.concat(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encodeGroups(k1);</span><br><span class="line">      s0 = s0.concat(s1);</span><br><span class="line">      <span class="keyword">return</span> s0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (args.length == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          System.err.printf(<span class="string">&quot;*** Usage: %s name%n&quot;</span>, keygen.class.getCanonicalName());</span><br><span class="line">          System.exit(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">      System.out.println(MakeKey(args[<span class="number">0</span>], <span class="number">0</span>, r.nextInt(<span class="number">100000</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
  </entry>
  <entry>
    <title>Gitflow Workflow</title>
    <url>/2017/09/26/git-flow/</url>
    <content><![CDATA[<h1 id="Gitflow-Workflow"><a href="#Gitflow-Workflow" class="headerlink" title="Gitflow Workflow"></a>Gitflow Workflow</h1><p>官方完整版见<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">这里</a></p>
<p><img src="http://ww1.sinaimg.cn/large/e5aac86bgy1fjx4p2gf78j20u80lm40o.jpg"></p>
<ol>
<li>feature 从dev branch出feature分支进行需求开发，完成改动后rebase合并回dev</li>
<li>dev dev累积足够的feature或者发布日期快到，从dev分出release_xx分支</li>
<li>release release_xx分支经过测试和bugfix之后，合并到master(如果有bug_fix，需要合并到dev)。</li>
<li>master release合并到master后，使用tag用来记录历史发布的版本。</li>
<li>hotfix 用户需要基于历史的版本进行bugfix，那么基于对应的tag，branch得到hotfix分支，完成fix，然后合并到master和dev。</li>
</ol>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>copyless</title>
    <url>/2017/11/21/copyless/</url>
    <content><![CDATA[<p>Copyless 2 更新后直接粘贴的功能用不了了，即使装了copyless helper插件，还是不能使用该功能。<br>暂时使用jumpcut代替，jump简洁一些，功能要少，不支持多媒体文件复制等等</p>
]]></content>
  </entry>
  <entry>
    <title>MAC下提高工作效率的软件推荐</title>
    <url>/2017/09/27/mac-app-recommend/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="Gas-Mask"><a href="#Gas-Mask" class="headerlink" title="Gas Mask"></a>Gas Mask</h1><p>可以很方便切换 hosts 文件的工具，十分好用。</p>
<ul>
<li>效率提高：不需要打开终端打开 hosts 了，点两下就好了，3s 内完成之前至少需要40s 完成的事情，而且还不会出错</li>
<li>相关地址：<a href="https://github.com/2ndalpha/gasmask">2ndalpha&#x2F;gasmask · GitHub</a><br><img src="https://pic2.zhimg.com/50/087958b74299020dcc63c4b020281625_hd.jpg" alt="titie"></li>
</ul>
<h1 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h1><h1 id="Copia"><a href="#Copia" class="headerlink" title="Copia"></a>Copia</h1><p>是一个复制粘贴管理工具，可以记录复制历史，然后粘贴任意你曾经复制过的内容。</p>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac-quick</title>
    <url>/2017/09/22/mac-quick/</url>
    <content><![CDATA[<h1 id="mac-快捷键记录"><a href="#mac-快捷键记录" class="headerlink" title="mac 快捷键记录"></a>mac 快捷键记录</h1><h2 id="文稿"><a href="#文稿" class="headerlink" title="文稿"></a>文稿</h2><p>在Mac OS X下执行shell命令时难免需要更改靠近行首的部分。<br>移动到开头（行首）：Ctrl + A<br>移动到结尾（行末）：Ctrl + E<br>Command+Shift+. 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；<br>finder下使用Command+Shift+G 可以前往任何文件夹，包括隐藏文件夹。<br>Control + b&#x2F;f&#x2F;n&#x2F;p ：左右上下移动光标。<br>Control + h&#x2F;d：删除光标左右两边的字符。键盘上的 delete 和 fn+delete 都可以完成这组操作，但手指移动距离过大，特别是 fn+delete，几乎是键盘上对角线最远的距离。</p>
<p>Control + a&#x2F;e，光标移动到行首行尾。<br>Control + n&#x2F;p，在许多的应用中，支持上下移动列表选项</p>
<p>￼￼<span id="more"></span><br><img src="http://ww1.sinaimg.cn/large/e5aac86bgy1fjsqmsnw5dj214a0imjtg.jpg"></p>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>CMD+ &lt;- 返回上一页<br>CMD+ -&gt; 下一页</p>
<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct Introduction</title>
    <url>/2023/12/03/mapstruct/</url>
    <content><![CDATA[<p>&emsp; &emsp; MapStruct是一种类型安全的bean映射类生成java注释处理器。<br>&emsp; &emsp; 我们要做的就是定义一个映射器接口，声明任何必需的映射方法。在编译的过程中，MapStruct会生成此接口的实现。该实现使用纯java方法调用的源和目标对象之间的映射，MapStruct节省了时间，通过生成代码完成繁琐和容易出错的代码逻辑。</p>
<p><a href="http://mapstruct.org/">官网地址</a><br><a href="https://mapstruct.org/documentation/stable/reference/html/">Reference Guide</a><br>￼￼<span id="more"></span></p>
<p>MapStruct works together with Project Lombok as of MapStruct 1.2.0.Beta1 and Lombok 1.16.14.</p>
<p>MapStruct takes advantage of generated getters, setters, and constructors and uses them to generate the mapper implementations.</p>
<blockquote>
<p>Lombok 1.18.16 introduces a breaking change (changelog). The additional annotation processor lombok-mapstruct-binding (Maven) must be added otherwise MapStruct stops working with Lombok. This resolves the compilation issues of Lombok and MapStruct modules.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.5.5.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lombok dependency should not end up on classpath --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- additional annotation processor required as of Lombok 1.18.16 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>useful third package.md</title>
    <url>/2019/02/14/useful-third-package-md/</url>
    <content><![CDATA[<h1 id="1-JaVers"><a href="#1-JaVers" class="headerlink" title="1. JaVers"></a>1. JaVers</h1><p>  Object auditing and diff framework for Java;JaVers是一个轻量级的对象比较&#x2F;审计框架,非常易于使用。支持持久化，支持springboot。</p>
<blockquote>
<p>如果你需要实时比较生产环境的处理结果和备份环境的处理结果，或是在新系统中重放生产环境的请求，或者像代码一样对对象进行版本管理，那么JaVers就可以成为你的好朋友。它不仅可以比较对象，也可以将比较结果存储在数据库中以便审计。审计是这样的一种需求：作为用户，我希望知道谁改变了状态;是什么时候改变的，以及原先的状态是什么。<br><a href="https://javers.org/">官网地址</a><br>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javers-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="2-MapStruct"><a href="#2-MapStruct" class="headerlink" title="2. MapStruct"></a>2. MapStruct</h1><p>MapStruct是一种类型安全的bean映射类生成java注释处理器。</p>
<blockquote>
<p>我们要做的就是定义一个映射器接口，声明任何必需的映射方法。在编译的过程中，MapStruct会生成此接口的实现。该实现使用纯java方法调用的源和目标对象之间的映射，MapStruct节省了时间，通过生成代码完成繁琐和容易出错的代码逻辑。<br><a href="http://mapstruct.org/">官网地址</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-jdk8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>youdaoNote</title>
    <url>/2017/11/24/youdaoNote/</url>
    <content><![CDATA[<p>在书签栏添加收藏到有道云笔记链接，不需要装插件。主页进去找到找页面的入口<br><a href="http://note.youdao.com/web-clipper.html?entry=index&auto=1">http://note.youdao.com/web-clipper.html?entry=index&amp;auto=1</a></p>
]]></content>
  </entry>
  <entry>
    <title>zshrc</title>
    <url>/2017/11/14/zshrc/</url>
    <content><![CDATA[<h1 id="zshrc-文件备份"><a href="#zshrc-文件备份" class="headerlink" title="zshrc  文件备份"></a>zshrc  文件备份</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Correctly display UTF-8 with combining characters.</span><br><span class="line">if [ &quot;$TERM_PROGRAM&quot; = &quot;Apple_Terminal&quot; ]; then</span><br><span class="line">	setopt combiningchars</span><br><span class="line">fi</span><br><span class="line">[[ -s ~/.oh-my-zsh/plugins/autojump/autojump.plugin.zsh ]] &amp;&amp; . ~/.oh-my-zsh/plugins/autojump/autojump.plugin.zsh</span><br><span class="line">[[ -s ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]] &amp;&amp; . ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">disable log</span><br><span class="line"># Generic</span><br><span class="line">alias ls=&#x27;ls -G&#x27;</span><br><span class="line">alias su=&#x27;su -&#x27;</span><br><span class="line">alias ll=&#x27;ls -l&#x27;</span><br><span class="line">alias la=&#x27;ls -a&#x27;</span><br><span class="line">alias l=&#x27;ls -lF&#x27;</span><br><span class="line">alias df=&#x27;df -h&#x27;</span><br><span class="line"></span><br><span class="line"># Git</span><br><span class="line">alias ga=&#x27;git add&#x27;</span><br><span class="line">alias gb=&#x27;git branch&#x27;</span><br><span class="line">alias gba=&#x27;git branch -a&#x27;</span><br><span class="line">alias gbd=&#x27;git branch -d&#x27;</span><br><span class="line">alias gcam=&#x27;git commit -a -m&#x27;</span><br><span class="line">alias gcb=&#x27;git checkout -b&#x27;</span><br><span class="line">alias gco=&#x27;git checkout&#x27;</span><br><span class="line">alias gcp=&#x27;git cherry-pick&#x27;</span><br><span class="line">alias gd=&#x27;git diff&#x27;</span><br><span class="line">alias gfo=&#x27;git fetch origin&#x27;</span><br><span class="line">alias ggpush=&#x27;git push origin $(git_current_branch)&#x27;</span><br><span class="line">alias ggsup=&#x27;git branch --set-upstream-to=origin/$(git_current_branch)&#x27;</span><br><span class="line">alias glgp=&#x27;git log --stat -p&#x27;</span><br><span class="line">alias gm=&#x27;git merge&#x27;</span><br><span class="line">alias gpush=&#x27;git push&#x27;</span><br><span class="line">alias gst=&#x27;git status&#x27;</span><br><span class="line">alias gsta=&#x27;git stash save&#x27;</span><br><span class="line">alias gstp=&#x27;git stash pop&#x27;</span><br><span class="line">alias gpull=&#x27;git pull&#x27;</span><br><span class="line"></span><br><span class="line"># mysql</span><br><span class="line">alias mysql=&#x27;/usr/local/mysql/bin/mysql&#x27;</span><br><span class="line">alias mysqladmin=&#x27;/usr/local/mysql/bin/mysqladmin&#x27;</span><br><span class="line"></span><br><span class="line"># maven</span><br><span class="line">alias mi=&#x27;mvn clean install -Dmaven.test.skip=true&#x27;</span><br><span class="line">alias mp=&#x27;mvn clean package -Dmaven.test.skip=true&#x27;</span><br><span class="line">alias mdp=&#x27;mvn clean package deploy -Dmaven.test.skip=true&#x27;</span><br><span class="line"></span><br><span class="line">alias vim=&#x27;sudo vim&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ -r &quot;/etc/zshrc_$TERM_PROGRAM&quot; ] &amp;&amp; . &quot;/etc/zshrc_$TERM_PROGRAM&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>事件驱动投资的九大建议</title>
    <url>/2023/12/06/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p><img src="/../images/event1.jpg" alt="Alt text"><br><img src="/../images/event2.jpg" alt="Alt text"></p>
]]></content>
      <categories>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Investment</tag>
      </tags>
  </entry>
  <entry>
    <title>可转债投资</title>
    <url>/2023/12/23/%E5%8F%AF%E8%BD%AC%E5%80%BA/</url>
    <content><![CDATA[<p>可转债筛选及置换原则<br><img src="/../images/kezhuanzhai.PNG" alt="Alt text"></p>
<p>补仓策略<br><img src="/../images/Margin.PNG" alt="Alt text"></p>
<p>卖出策略<br>价格到140就卖</p>
]]></content>
      <categories>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Investment</tag>
      </tags>
  </entry>
  <entry>
    <title>基金定投</title>
    <url>/2023/12/30/%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</url>
    <content><![CDATA[<h1 id="投资标的"><a href="#投资标的" class="headerlink" title="投资标的"></a>投资标的</h1><p>只定投指数基金</p>
<table>
<thead>
<tr>
<th>ETF</th>
<th>建仓时机</th>
</tr>
</thead>
<tbody><tr>
<td>沪深300ETF</td>
<td>PE低于14，指数低于60月均线</td>
</tr>
<tr>
<td>创业板ETF</td>
<td></td>
</tr>
<tr>
<td>中证500ETF</td>
<td></td>
</tr>
</tbody></table>
<h2 id="定投策略"><a href="#定投策略" class="headerlink" title="定投策略"></a>定投策略</h2><ol>
<li>每月1日开盘定投</li>
<li>长期定投，按3~5年规划资金投入</li>
</ol>
<h2 id="卖出策略"><a href="#卖出策略" class="headerlink" title="卖出策略"></a>卖出策略</h2><ol>
<li>从第一次建仓开始计算总持仓的收益满足年化15%的要求则卖出</li>
<li>提前设置自动定投，每月定投完成后按上面策略计算好卖出价，设置自动全仓卖出</li>
</ol>
]]></content>
      <categories>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Investment</tag>
      </tags>
  </entry>
</search>
